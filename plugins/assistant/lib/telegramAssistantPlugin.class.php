<?php

/**
 * Class telegramAssistantPlugin
 */
class telegramAssistantPlugin extends telegramPlugin
{
    /**
     * @var waView $view
     */
    private static $view;

    /**
     * @return waSmarty3View|waView
     * @throws waException
     */
    private static function getView()
    {
        if (!isset(self::$view)) {
            self::$view = waSystem::getInstance()->getView();
        }
        return self::$view;
    }

    /**
     * @var telegramAssistantPlugin $plugin
     */
    private static $plugin;

    /**
     * @return telegramAssistantPlugin|waPlugin
     * @throws waException
     */
    private static function getPlugin()
    {
        if (!isset(self::$plugin)) {
            self::$plugin = wa('telegram')->getPlugin('assistant');
        }
        return self::$plugin;
    }

    public function getSettings($name = null)
    {
        if (isset($this->settings[$name]) && !is_array($this->settings[$name]) && stripos($name, '_title')) {
            $this->settings[$name] = base64_decode($this->settings[$name]);
        }

        return parent::getSettings($name);
    }

    public function saveSettings($settings = array())
    {
        foreach ($settings as $key => $s) {
            if (!is_array($s) && stripos($key, '_title')) {
                $settings[$key] = base64_encode($s);
            }
        }
        parent::saveSettings($settings); // TODO: Change the autogenerated stub
    }


    /**
     * @return string
     * @throws waException
     */
    public static function getPluginPath()
    {
        $plugin = self::getPlugin();
        return $plugin->path;
    }

    /**
     * @return string
     * @throws waException
     */
    public static function getPlgStaticUrl($absolute = false) {
        $plugin = self::getPlugin();
        return $plugin->getPluginStaticUrl($absolute);
    }

    /**
     * @return string
     * @throws waException
     */
    public static function getFeedbackControl()
    {
        $view = self::getView();
        $plugin = self::getPlugin();
        return $view->fetch($plugin->getPluginPath() . '/templates/controls/feedbackControl.html');
    }

    /**
     * @return string
     * @throws waException
     */
    public static function getBotUrlControl()
    {
        $view = self::getView();
        $plugin = self::getPlugin();
        $settlements = self::getSettlements();
        $view->assign('settlements', $settlements);

        return $view->fetch($plugin->getPluginPath() . '/templates/controls/botUrlControl.html');
    }

    /**
     * @return string
     * @throws waException
     */
    public static function getWebhookUrlControl()
    {
        $view = self::getView();
        $plugin = self::getPlugin();
        $settlements = self::getSettlements();
        $view->assign('settlements', $settlements);
        $view->assign('settings', $plugin->getSettings());
        return $view->fetch($plugin->getPluginPath() . '/templates/controls/webhookUrlControl.html');
    }

    /**
     * @return string
     * @throws waException
     */
    public static function getHttpsCheckControl()
    {
        $view = self::getView();
        $plugin = self::getPlugin();
        $view->assign('is_https', waRequest::isHttps());
        return $view->fetch($plugin->getPluginPath() . '/templates/controls/httpsCheckControl.html');
    }


    /**
     * @return array
     * @throws waException
     */
    public static function getSettlements()
    {
        $settlements = array();
        $routing = wa()->getRouting();
        $domain_routes = $routing->getByApp('telegram');
        foreach ($domain_routes as $domain => $routes) {
            foreach ($routes as $route) {
                $routing->setRoute($route, $domain);
                $settlement = wa('telegram')->getRouteUrl('telegram/frontend', array(), true);
                $settlements[] = $settlement;
            }
        }
        return $settlements;
    }

    /**
     * @return array
     */
    public static function getTabs() {
        $tabs = array(
            'interface' => array(
                'name' => _wp('Interface'),
                'template' => 'Interface.html',
            ),
            'info' => array(
                'name' => _wp('Information'),
                'template' => 'Info.html',
            ),
        );
        return $tabs;
    }
}
